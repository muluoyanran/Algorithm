// //�Ż���һ��ͨ�����С�����201711202027933���Ľⷨ����Ҫ�Ǹ���άdpֱ�Ӹ���ֵ���������Լ���һ��ѭ��
// //ͬʱ������һЩע�ͣ���߿ɶ���
// #include<iostream>
// #include<vector>
// #include<algorithm>
// using namespace std;
// vector<int>ss;
// int dp[2][100005] = { 0 };
// int main()
// {
//    int N, M, sum, h, k, count, now; //N��ʾ�˵ĸ�����M��ʾ����������˵Ĵ�����cout��ʾ�˵��ܵĺóԶȣ�now��ʾ��ǰ����˵ĺóԶ�
//    cin >> N >> M;

//    count = 0;
//    while (N--) {
//        cin >> now;  //����˵ĺóԳ̶�
//        if (count > 0) {  //�ܵĺóԶ�Ϊ��ʱ
//            if (now >= 0)  //�óԶ�Ϊ�����ۼӺóԶ�
//                count += now;
//            else {
//                ss.push_back(count);   //�óԶ�Ϊ������֮ǰ�ܵĺóԶȴ��������������ܵĺóԶ�
//                count = now;
//            }
//        }

//        else if (count < 0) {  //�ܵĺóԶ�Ϊ����ʱ
//            if (now >= 0) {
//                ss.push_back(count);  //��ǰ�óԶ�Ϊ������֮ǰ�ܵĺóԶȴ��������������ܵĺóԶ�
//                count = now;
//            }
//            else
//                count += now;   //�óԶ�Ϊ�����ۼӺóԶ�
//        }

//        else
//            count += now;   //�ܵĺóԶ�Ϊ0ʱ���ۼӺóԶ�
//    }

//    if (count > 0)   //�������������ܵĺóԶ����Ϊ������ô������
//    {
//        ss.push_back(count);
//    }
//    /*
//    �������ɵĻ���ʵ��������ǰѲ˵ĺóԶȽ��м򵥵Ĵ����������������Ļ������Ÿ��ľ��ۼ�
//    �ټ������ӷ������⣺
//    ���룺7 7 ��1 2 3 -2 3 -10 3��
//    ���ss:[6 -2 3 -10 3]
//    ���룺10 1 ��-1 2 4 -3 5 -7 11 24 -6 -9��
//    ���ss:[-1 6 -3 5 -7 35]
//    ���룺6 1 ��1 -2 -3 -4 -5 -6��
//    ���ss��[1]
//    ���룺7 1 ��1 -1 -2 -3 -4 2 3��
//    ���ss��[1 -10 5]
//    ��������Ŀ�Ŀ�����Ч���ٽ�������άdp��������
//    ������ֱ����dp����Ϊ����������ֻͨ��80%�Ĳ��԰���
//    */

//    sum = 0;

//    N = ss.size() + 1;
//    count = 0;
//    //�ɲ����������ڴ洢�������ܺó�ֵ������ֱ�Ӱ����Ķ�ȡ�����ۼӾ������յ��ܵĺóԶ�
//    if (N <= M) {
//        for (int j = 0; j < N; j++) {
//            if (ss[j] > 0)
//                count += ss[j];
//        }
//        return 0;
//    }

//    //�ɲ�������С�ڴ洢�������ܵĺó�ֵ�ĸ�����ת��Ϊ��άdp
//    else {
//        for (int i = 1; i <= M; i++) {
//            sum = 0;
//            k = i & 1;
//            h = (i - 1) & 1;
//            dp[k][0] = 0;
//            for (int j = 1; j < N; j++) {
//                sum = max(sum, dp[h][j - 1]);
//                dp[k][j] = max(sum, dp[k][j - 1]) + ss[j - 1];
//            }
//        }
//        for (int i = M; i < N; i++)
//            if (count < dp[k][i])
//                count = dp[k][i];
//    }
//    cout << count << endl;


//    return 0;

// }